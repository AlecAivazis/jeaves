// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildBank is the model entity for the GuildBank schema.
type GuildBank struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChannelID holds the value of the "channelID" field.
	ChannelID string `json:"channelID,omitempty"`
	// DisplayMessageID holds the value of the "displayMessageID" field.
	DisplayMessageID string `json:"displayMessageID,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance int `json:"balance,omitempty"`
}

// FromRows scans the sql response data into GuildBank.
func (gb *GuildBank) FromRows(rows *sql.Rows) error {
	var vgb struct {
		ID               int
		ChannelID        sql.NullString
		DisplayMessageID sql.NullString
		Balance          sql.NullInt64
	}
	// the order here should be the same as in the `guildbank.Columns`.
	if err := rows.Scan(
		&vgb.ID,
		&vgb.ChannelID,
		&vgb.DisplayMessageID,
		&vgb.Balance,
	); err != nil {
		return err
	}
	gb.ID = vgb.ID
	gb.ChannelID = vgb.ChannelID.String
	gb.DisplayMessageID = vgb.DisplayMessageID.String
	gb.Balance = int(vgb.Balance.Int64)
	return nil
}

// QueryItems queries the items edge of the GuildBank.
func (gb *GuildBank) QueryItems() *BankItemQuery {
	return (&GuildBankClient{gb.config}).QueryItems(gb)
}

// QueryGuild queries the guild edge of the GuildBank.
func (gb *GuildBank) QueryGuild() *GuildQuery {
	return (&GuildBankClient{gb.config}).QueryGuild(gb)
}

// Update returns a builder for updating this GuildBank.
// Note that, you need to call GuildBank.Unwrap() before calling this method, if this GuildBank
// was returned from a transaction, and the transaction was committed or rolled back.
func (gb *GuildBank) Update() *GuildBankUpdateOne {
	return (&GuildBankClient{gb.config}).UpdateOne(gb)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gb *GuildBank) Unwrap() *GuildBank {
	tx, ok := gb.config.driver.(*txDriver)
	if !ok {
		panic("db: GuildBank is not a transactional entity")
	}
	gb.config.driver = tx.drv
	return gb
}

// String implements the fmt.Stringer.
func (gb *GuildBank) String() string {
	var builder strings.Builder
	builder.WriteString("GuildBank(")
	builder.WriteString(fmt.Sprintf("id=%v", gb.ID))
	builder.WriteString(", channelID=")
	builder.WriteString(gb.ChannelID)
	builder.WriteString(", displayMessageID=")
	builder.WriteString(gb.DisplayMessageID)
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", gb.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// GuildBanks is a parsable slice of GuildBank.
type GuildBanks []*GuildBank

// FromRows scans the sql response data into GuildBanks.
func (gb *GuildBanks) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vgb := &GuildBank{}
		if err := vgb.FromRows(rows); err != nil {
			return err
		}
		*gb = append(*gb, vgb)
	}
	return nil
}

func (gb GuildBanks) config(cfg config) {
	for _i := range gb {
		gb[_i].config = cfg
	}
}
