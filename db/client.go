// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"log"

	"github.com/AlecAivazis/jeeves/db/migrate"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildbank"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BankItem is the client for interacting with the BankItem builders.
	BankItem *BankItemClient
	// Guild is the client for interacting with the Guild builders.
	Guild *GuildClient
	// GuildBank is the client for interacting with the GuildBank builders.
	GuildBank *GuildBankClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config:    c,
		Schema:    migrate.NewSchema(c.driver),
		BankItem:  NewBankItemClient(c),
		Guild:     NewGuildClient(c),
		GuildBank: NewGuildBankClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil

	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("db: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("db: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config:    cfg,
		BankItem:  NewBankItemClient(cfg),
		Guild:     NewGuildClient(cfg),
		GuildBank: NewGuildBankClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BankItem.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config:    cfg,
		Schema:    migrate.NewSchema(cfg.driver),
		BankItem:  NewBankItemClient(cfg),
		Guild:     NewGuildClient(cfg),
		GuildBank: NewGuildBankClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// BankItemClient is a client for the BankItem schema.
type BankItemClient struct {
	config
}

// NewBankItemClient returns a client for the BankItem from the given config.
func NewBankItemClient(c config) *BankItemClient {
	return &BankItemClient{config: c}
}

// Create returns a create builder for BankItem.
func (c *BankItemClient) Create() *BankItemCreate {
	return &BankItemCreate{config: c.config}
}

// Update returns an update builder for BankItem.
func (c *BankItemClient) Update() *BankItemUpdate {
	return &BankItemUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankItemClient) UpdateOne(bi *BankItem) *BankItemUpdateOne {
	return c.UpdateOneID(bi.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *BankItemClient) UpdateOneID(id int) *BankItemUpdateOne {
	return &BankItemUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for BankItem.
func (c *BankItemClient) Delete() *BankItemDelete {
	return &BankItemDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankItemClient) DeleteOne(bi *BankItem) *BankItemDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankItemClient) DeleteOneID(id int) *BankItemDeleteOne {
	return &BankItemDeleteOne{c.Delete().Where(bankitem.ID(id))}
}

// Create returns a query builder for BankItem.
func (c *BankItemClient) Query() *BankItemQuery {
	return &BankItemQuery{config: c.config}
}

// Get returns a BankItem entity by its id.
func (c *BankItemClient) Get(ctx context.Context, id int) (*BankItem, error) {
	return c.Query().Where(bankitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankItemClient) GetX(ctx context.Context, id int) *BankItem {
	bi, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return bi
}

// QueryBank queries the bank edge of a BankItem.
func (c *BankItemClient) QueryBank(bi *BankItem) *GuildBankQuery {
	query := &GuildBankQuery{config: c.config}
	id := bi.ID
	builder := sql.Dialect(bi.driver.Dialect())
	t1 := builder.Table(guildbank.Table)
	t2 := builder.Select(bankitem.BankColumn).
		From(builder.Table(bankitem.BankTable)).
		Where(sql.EQ(bankitem.FieldID, id))
	query.sql = builder.Select().From(t1).Join(t2).On(t1.C(guildbank.FieldID), t2.C(bankitem.BankColumn))

	return query
}

// GuildClient is a client for the Guild schema.
type GuildClient struct {
	config
}

// NewGuildClient returns a client for the Guild from the given config.
func NewGuildClient(c config) *GuildClient {
	return &GuildClient{config: c}
}

// Create returns a create builder for Guild.
func (c *GuildClient) Create() *GuildCreate {
	return &GuildCreate{config: c.config}
}

// Update returns an update builder for Guild.
func (c *GuildClient) Update() *GuildUpdate {
	return &GuildUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildClient) UpdateOne(gu *Guild) *GuildUpdateOne {
	return c.UpdateOneID(gu.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildClient) UpdateOneID(id int) *GuildUpdateOne {
	return &GuildUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Guild.
func (c *GuildClient) Delete() *GuildDelete {
	return &GuildDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GuildClient) DeleteOne(gu *Guild) *GuildDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GuildClient) DeleteOneID(id int) *GuildDeleteOne {
	return &GuildDeleteOne{c.Delete().Where(guild.ID(id))}
}

// Create returns a query builder for Guild.
func (c *GuildClient) Query() *GuildQuery {
	return &GuildQuery{config: c.config}
}

// Get returns a Guild entity by its id.
func (c *GuildClient) Get(ctx context.Context, id int) (*Guild, error) {
	return c.Query().Where(guild.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildClient) GetX(ctx context.Context, id int) *Guild {
	gu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return gu
}

// QueryBank queries the bank edge of a Guild.
func (c *GuildClient) QueryBank(gu *Guild) *GuildBankQuery {
	query := &GuildBankQuery{config: c.config}
	id := gu.ID
	builder := sql.Dialect(gu.driver.Dialect())
	query.sql = builder.Select().From(builder.Table(guildbank.Table)).
		Where(sql.EQ(guild.BankColumn, id))

	return query
}

// GuildBankClient is a client for the GuildBank schema.
type GuildBankClient struct {
	config
}

// NewGuildBankClient returns a client for the GuildBank from the given config.
func NewGuildBankClient(c config) *GuildBankClient {
	return &GuildBankClient{config: c}
}

// Create returns a create builder for GuildBank.
func (c *GuildBankClient) Create() *GuildBankCreate {
	return &GuildBankCreate{config: c.config}
}

// Update returns an update builder for GuildBank.
func (c *GuildBankClient) Update() *GuildBankUpdate {
	return &GuildBankUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuildBankClient) UpdateOne(gb *GuildBank) *GuildBankUpdateOne {
	return c.UpdateOneID(gb.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *GuildBankClient) UpdateOneID(id int) *GuildBankUpdateOne {
	return &GuildBankUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for GuildBank.
func (c *GuildBankClient) Delete() *GuildBankDelete {
	return &GuildBankDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GuildBankClient) DeleteOne(gb *GuildBank) *GuildBankDeleteOne {
	return c.DeleteOneID(gb.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GuildBankClient) DeleteOneID(id int) *GuildBankDeleteOne {
	return &GuildBankDeleteOne{c.Delete().Where(guildbank.ID(id))}
}

// Create returns a query builder for GuildBank.
func (c *GuildBankClient) Query() *GuildBankQuery {
	return &GuildBankQuery{config: c.config}
}

// Get returns a GuildBank entity by its id.
func (c *GuildBankClient) Get(ctx context.Context, id int) (*GuildBank, error) {
	return c.Query().Where(guildbank.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuildBankClient) GetX(ctx context.Context, id int) *GuildBank {
	gb, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return gb
}

// QueryItems queries the items edge of a GuildBank.
func (c *GuildBankClient) QueryItems(gb *GuildBank) *BankItemQuery {
	query := &BankItemQuery{config: c.config}
	id := gb.ID
	builder := sql.Dialect(gb.driver.Dialect())
	query.sql = builder.Select().From(builder.Table(bankitem.Table)).
		Where(sql.EQ(guildbank.ItemsColumn, id))

	return query
}

// QueryGuild queries the guild edge of a GuildBank.
func (c *GuildBankClient) QueryGuild(gb *GuildBank) *GuildQuery {
	query := &GuildQuery{config: c.config}
	id := gb.ID
	builder := sql.Dialect(gb.driver.Dialect())
	t1 := builder.Table(guild.Table)
	t2 := builder.Select(guildbank.GuildColumn).
		From(builder.Table(guildbank.GuildTable)).
		Where(sql.EQ(guildbank.FieldID, id))
	query.sql = builder.Select().From(t1).Join(t2).On(t1.C(guild.FieldID), t2.C(guildbank.GuildColumn))

	return query
}
