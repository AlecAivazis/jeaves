// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"

	"github.com/AlecAivazis/jeeves/db/guildchannel"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildChannelCreate is the builder for creating a GuildChannel entity.
type GuildChannelCreate struct {
	config
	channel *string
	role    *string
	guild   map[int]struct{}
}

// SetChannel sets the channel field.
func (gcc *GuildChannelCreate) SetChannel(s string) *GuildChannelCreate {
	gcc.channel = &s
	return gcc
}

// SetRole sets the role field.
func (gcc *GuildChannelCreate) SetRole(s string) *GuildChannelCreate {
	gcc.role = &s
	return gcc
}

// SetGuildID sets the guild edge to Guild by id.
func (gcc *GuildChannelCreate) SetGuildID(id int) *GuildChannelCreate {
	if gcc.guild == nil {
		gcc.guild = make(map[int]struct{})
	}
	gcc.guild[id] = struct{}{}
	return gcc
}

// SetNillableGuildID sets the guild edge to Guild by id if the given value is not nil.
func (gcc *GuildChannelCreate) SetNillableGuildID(id *int) *GuildChannelCreate {
	if id != nil {
		gcc = gcc.SetGuildID(*id)
	}
	return gcc
}

// SetGuild sets the guild edge to Guild.
func (gcc *GuildChannelCreate) SetGuild(g *Guild) *GuildChannelCreate {
	return gcc.SetGuildID(g.ID)
}

// Save creates the GuildChannel in the database.
func (gcc *GuildChannelCreate) Save(ctx context.Context) (*GuildChannel, error) {
	if gcc.channel == nil {
		return nil, errors.New("db: missing required field \"channel\"")
	}
	if gcc.role == nil {
		return nil, errors.New("db: missing required field \"role\"")
	}
	if len(gcc.guild) > 1 {
		return nil, errors.New("db: multiple assignments on a unique edge \"guild\"")
	}
	return gcc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (gcc *GuildChannelCreate) SaveX(ctx context.Context) *GuildChannel {
	v, err := gcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gcc *GuildChannelCreate) sqlSave(ctx context.Context) (*GuildChannel, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(gcc.driver.Dialect())
		gc      = &GuildChannel{config: gcc.config}
	)
	tx, err := gcc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(guildchannel.Table).Default()
	if value := gcc.channel; value != nil {
		insert.Set(guildchannel.FieldChannel, *value)
		gc.Channel = *value
	}
	if value := gcc.role; value != nil {
		insert.Set(guildchannel.FieldRole, *value)
		gc.Role = *value
	}
	id, err := insertLastID(ctx, tx, insert.Returning(guildchannel.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	gc.ID = int(id)
	if len(gcc.guild) > 0 {
		for eid := range gcc.guild {
			query, args := builder.Update(guildchannel.GuildTable).
				Set(guildchannel.GuildColumn, eid).
				Where(sql.EQ(guildchannel.FieldID, id)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return gc, nil
}
