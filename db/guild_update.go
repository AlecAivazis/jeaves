// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildbank"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	discordID   *string
	bank        map[int]struct{}
	clearedBank bool
	predicates  []predicate.Guild
}

// Where adds a new predicate for the builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.predicates = append(gu.predicates, ps...)
	return gu
}

// SetDiscordID sets the discordID field.
func (gu *GuildUpdate) SetDiscordID(s string) *GuildUpdate {
	gu.discordID = &s
	return gu
}

// SetBankID sets the bank edge to GuildBank by id.
func (gu *GuildUpdate) SetBankID(id int) *GuildUpdate {
	if gu.bank == nil {
		gu.bank = make(map[int]struct{})
	}
	gu.bank[id] = struct{}{}
	return gu
}

// SetNillableBankID sets the bank edge to GuildBank by id if the given value is not nil.
func (gu *GuildUpdate) SetNillableBankID(id *int) *GuildUpdate {
	if id != nil {
		gu = gu.SetBankID(*id)
	}
	return gu
}

// SetBank sets the bank edge to GuildBank.
func (gu *GuildUpdate) SetBank(g *GuildBank) *GuildUpdate {
	return gu.SetBankID(g.ID)
}

// ClearBank clears the bank edge to GuildBank.
func (gu *GuildUpdate) ClearBank() *GuildUpdate {
	gu.clearedBank = true
	return gu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	if len(gu.bank) > 1 {
		return 0, errors.New("db: multiple assignments on a unique edge \"bank\"")
	}
	return gu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(gu.driver.Dialect())
		selector = builder.Select(guild.FieldID).From(builder.Table(guild.Table))
	)
	for _, p := range gu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = gu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("db: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := gu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guild.Table).Where(sql.InInts(guild.FieldID, ids...))
	)
	if value := gu.discordID; value != nil {
		updater.Set(guild.FieldDiscordID, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if gu.clearedBank {
		query, args := builder.Update(guild.BankTable).
			SetNull(guild.BankColumn).
			Where(sql.InInts(guildbank.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(gu.bank) > 0 {
		for _, id := range ids {
			eid := keys(gu.bank)[0]
			query, args := builder.Update(guild.BankTable).
				Set(guild.BankColumn, id).
				Where(sql.EQ(guildbank.FieldID, eid).And().IsNull(guild.BankColumn)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(gu.bank) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(gu.bank))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	id          int
	discordID   *string
	bank        map[int]struct{}
	clearedBank bool
}

// SetDiscordID sets the discordID field.
func (guo *GuildUpdateOne) SetDiscordID(s string) *GuildUpdateOne {
	guo.discordID = &s
	return guo
}

// SetBankID sets the bank edge to GuildBank by id.
func (guo *GuildUpdateOne) SetBankID(id int) *GuildUpdateOne {
	if guo.bank == nil {
		guo.bank = make(map[int]struct{})
	}
	guo.bank[id] = struct{}{}
	return guo
}

// SetNillableBankID sets the bank edge to GuildBank by id if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableBankID(id *int) *GuildUpdateOne {
	if id != nil {
		guo = guo.SetBankID(*id)
	}
	return guo
}

// SetBank sets the bank edge to GuildBank.
func (guo *GuildUpdateOne) SetBank(g *GuildBank) *GuildUpdateOne {
	return guo.SetBankID(g.ID)
}

// ClearBank clears the bank edge to GuildBank.
func (guo *GuildUpdateOne) ClearBank() *GuildUpdateOne {
	guo.clearedBank = true
	return guo
}

// Save executes the query and returns the updated entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	if len(guo.bank) > 1 {
		return nil, errors.New("db: multiple assignments on a unique edge \"bank\"")
	}
	return guo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	gu, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gu
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (gu *Guild, err error) {
	var (
		builder  = sql.Dialect(guo.driver.Dialect())
		selector = builder.Select(guild.Columns...).From(builder.Table(guild.Table))
	)
	guild.ID(guo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = guo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		gu = &Guild{config: guo.config}
		if err := gu.FromRows(rows); err != nil {
			return nil, fmt.Errorf("db: failed scanning row into Guild: %v", err)
		}
		id = gu.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Guild with id: %v", guo.id)}
	case n > 1:
		return nil, fmt.Errorf("db: more than one Guild with the same id: %v", guo.id)
	}

	tx, err := guo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guild.Table).Where(sql.InInts(guild.FieldID, ids...))
	)
	if value := guo.discordID; value != nil {
		updater.Set(guild.FieldDiscordID, *value)
		gu.DiscordID = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if guo.clearedBank {
		query, args := builder.Update(guild.BankTable).
			SetNull(guild.BankColumn).
			Where(sql.InInts(guildbank.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(guo.bank) > 0 {
		for _, id := range ids {
			eid := keys(guo.bank)[0]
			query, args := builder.Update(guild.BankTable).
				Set(guild.BankColumn, id).
				Where(sql.EQ(guildbank.FieldID, eid).And().IsNull(guild.BankColumn)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(guo.bank) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(guo.bank))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return gu, nil
}
