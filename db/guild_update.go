// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildchannel"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	id              *string
	channels        map[int]struct{}
	bank            map[int]struct{}
	removedChannels map[int]struct{}
	removedBank     map[int]struct{}
	predicates      []predicate.Guild
}

// Where adds a new predicate for the builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.predicates = append(gu.predicates, ps...)
	return gu
}

// SetID sets the id field.
func (gu *GuildUpdate) SetID(s string) *GuildUpdate {
	gu.id = &s
	return gu
}

// AddChannelIDs adds the channels edge to GuildChannel by ids.
func (gu *GuildUpdate) AddChannelIDs(ids ...int) *GuildUpdate {
	if gu.channels == nil {
		gu.channels = make(map[int]struct{})
	}
	for i := range ids {
		gu.channels[ids[i]] = struct{}{}
	}
	return gu
}

// AddChannels adds the channels edges to GuildChannel.
func (gu *GuildUpdate) AddChannels(g ...*GuildChannel) *GuildUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddChannelIDs(ids...)
}

// AddBankIDs adds the bank edge to BankItem by ids.
func (gu *GuildUpdate) AddBankIDs(ids ...int) *GuildUpdate {
	if gu.bank == nil {
		gu.bank = make(map[int]struct{})
	}
	for i := range ids {
		gu.bank[ids[i]] = struct{}{}
	}
	return gu
}

// AddBank adds the bank edges to BankItem.
func (gu *GuildUpdate) AddBank(b ...*BankItem) *GuildUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gu.AddBankIDs(ids...)
}

// RemoveChannelIDs removes the channels edge to GuildChannel by ids.
func (gu *GuildUpdate) RemoveChannelIDs(ids ...int) *GuildUpdate {
	if gu.removedChannels == nil {
		gu.removedChannels = make(map[int]struct{})
	}
	for i := range ids {
		gu.removedChannels[ids[i]] = struct{}{}
	}
	return gu
}

// RemoveChannels removes channels edges to GuildChannel.
func (gu *GuildUpdate) RemoveChannels(g ...*GuildChannel) *GuildUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveChannelIDs(ids...)
}

// RemoveBankIDs removes the bank edge to BankItem by ids.
func (gu *GuildUpdate) RemoveBankIDs(ids ...int) *GuildUpdate {
	if gu.removedBank == nil {
		gu.removedBank = make(map[int]struct{})
	}
	for i := range ids {
		gu.removedBank[ids[i]] = struct{}{}
	}
	return gu
}

// RemoveBank removes bank edges to BankItem.
func (gu *GuildUpdate) RemoveBank(b ...*BankItem) *GuildUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gu.RemoveBankIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	return gu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(gu.driver.Dialect())
		selector = builder.Select(guild.FieldID).From(builder.Table(guild.Table))
	)
	for _, p := range gu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = gu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("db: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := gu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guild.Table).Where(sql.InInts(guild.FieldID, ids...))
	)
	if value := gu.id; value != nil {
		updater.Set(guild.FieldID, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(gu.removedChannels) > 0 {
		eids := make([]int, len(gu.removedChannels))
		for eid := range gu.removedChannels {
			eids = append(eids, eid)
		}
		query, args := builder.Update(guild.ChannelsTable).
			SetNull(guild.ChannelsColumn).
			Where(sql.InInts(guild.ChannelsColumn, ids...)).
			Where(sql.InInts(guildchannel.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(gu.channels) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range gu.channels {
				p.Or().EQ(guildchannel.FieldID, eid)
			}
			query, args := builder.Update(guild.ChannelsTable).
				Set(guild.ChannelsColumn, id).
				Where(sql.And(p, sql.IsNull(guild.ChannelsColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(gu.channels) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"channels\" %v already connected to a different \"Guild\"", keys(gu.channels))})
			}
		}
	}
	if len(gu.removedBank) > 0 {
		eids := make([]int, len(gu.removedBank))
		for eid := range gu.removedBank {
			eids = append(eids, eid)
		}
		query, args := builder.Update(guild.BankTable).
			SetNull(guild.BankColumn).
			Where(sql.InInts(guild.BankColumn, ids...)).
			Where(sql.InInts(bankitem.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(gu.bank) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range gu.bank {
				p.Or().EQ(bankitem.FieldID, eid)
			}
			query, args := builder.Update(guild.BankTable).
				Set(guild.BankColumn, id).
				Where(sql.And(p, sql.IsNull(guild.BankColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(gu.bank) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(gu.bank))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	id              int
	id              *string
	channels        map[int]struct{}
	bank            map[int]struct{}
	removedChannels map[int]struct{}
	removedBank     map[int]struct{}
}

// SetID sets the id field.
func (guo *GuildUpdateOne) SetID(s string) *GuildUpdateOne {
	guo.id = &s
	return guo
}

// AddChannelIDs adds the channels edge to GuildChannel by ids.
func (guo *GuildUpdateOne) AddChannelIDs(ids ...int) *GuildUpdateOne {
	if guo.channels == nil {
		guo.channels = make(map[int]struct{})
	}
	for i := range ids {
		guo.channels[ids[i]] = struct{}{}
	}
	return guo
}

// AddChannels adds the channels edges to GuildChannel.
func (guo *GuildUpdateOne) AddChannels(g ...*GuildChannel) *GuildUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddChannelIDs(ids...)
}

// AddBankIDs adds the bank edge to BankItem by ids.
func (guo *GuildUpdateOne) AddBankIDs(ids ...int) *GuildUpdateOne {
	if guo.bank == nil {
		guo.bank = make(map[int]struct{})
	}
	for i := range ids {
		guo.bank[ids[i]] = struct{}{}
	}
	return guo
}

// AddBank adds the bank edges to BankItem.
func (guo *GuildUpdateOne) AddBank(b ...*BankItem) *GuildUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return guo.AddBankIDs(ids...)
}

// RemoveChannelIDs removes the channels edge to GuildChannel by ids.
func (guo *GuildUpdateOne) RemoveChannelIDs(ids ...int) *GuildUpdateOne {
	if guo.removedChannels == nil {
		guo.removedChannels = make(map[int]struct{})
	}
	for i := range ids {
		guo.removedChannels[ids[i]] = struct{}{}
	}
	return guo
}

// RemoveChannels removes channels edges to GuildChannel.
func (guo *GuildUpdateOne) RemoveChannels(g ...*GuildChannel) *GuildUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveChannelIDs(ids...)
}

// RemoveBankIDs removes the bank edge to BankItem by ids.
func (guo *GuildUpdateOne) RemoveBankIDs(ids ...int) *GuildUpdateOne {
	if guo.removedBank == nil {
		guo.removedBank = make(map[int]struct{})
	}
	for i := range ids {
		guo.removedBank[ids[i]] = struct{}{}
	}
	return guo
}

// RemoveBank removes bank edges to BankItem.
func (guo *GuildUpdateOne) RemoveBank(b ...*BankItem) *GuildUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return guo.RemoveBankIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	return guo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	gu, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gu
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (gu *Guild, err error) {
	var (
		builder  = sql.Dialect(guo.driver.Dialect())
		selector = builder.Select(guild.Columns...).From(builder.Table(guild.Table))
	)
	guild.ID(guo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = guo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		gu = &Guild{config: guo.config}
		if err := gu.FromRows(rows); err != nil {
			return nil, fmt.Errorf("db: failed scanning row into Guild: %v", err)
		}
		id = gu.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Guild with id: %v", guo.id)}
	case n > 1:
		return nil, fmt.Errorf("db: more than one Guild with the same id: %v", guo.id)
	}

	tx, err := guo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guild.Table).Where(sql.InInts(guild.FieldID, ids...))
	)
	if value := guo.id; value != nil {
		updater.Set(guild.FieldID, *value)
		gu.ID = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(guo.removedChannels) > 0 {
		eids := make([]int, len(guo.removedChannels))
		for eid := range guo.removedChannels {
			eids = append(eids, eid)
		}
		query, args := builder.Update(guild.ChannelsTable).
			SetNull(guild.ChannelsColumn).
			Where(sql.InInts(guild.ChannelsColumn, ids...)).
			Where(sql.InInts(guildchannel.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(guo.channels) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range guo.channels {
				p.Or().EQ(guildchannel.FieldID, eid)
			}
			query, args := builder.Update(guild.ChannelsTable).
				Set(guild.ChannelsColumn, id).
				Where(sql.And(p, sql.IsNull(guild.ChannelsColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(guo.channels) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"channels\" %v already connected to a different \"Guild\"", keys(guo.channels))})
			}
		}
	}
	if len(guo.removedBank) > 0 {
		eids := make([]int, len(guo.removedBank))
		for eid := range guo.removedBank {
			eids = append(eids, eid)
		}
		query, args := builder.Update(guild.BankTable).
			SetNull(guild.BankColumn).
			Where(sql.InInts(guild.BankColumn, ids...)).
			Where(sql.InInts(bankitem.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(guo.bank) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range guo.bank {
				p.Or().EQ(bankitem.FieldID, eid)
			}
			query, args := builder.Update(guild.BankTable).
				Set(guild.BankColumn, id).
				Where(sql.And(p, sql.IsNull(guild.BankColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(guo.bank) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(guo.bank))})
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return gu, nil
}
