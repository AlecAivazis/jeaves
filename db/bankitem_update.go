// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BankItemUpdate is the builder for updating BankItem entities.
type BankItemUpdate struct {
	config
	itemID       *string
	quantity     *int
	addquantity  *int
	guild        map[int]struct{}
	clearedGuild bool
	predicates   []predicate.BankItem
}

// Where adds a new predicate for the builder.
func (biu *BankItemUpdate) Where(ps ...predicate.BankItem) *BankItemUpdate {
	biu.predicates = append(biu.predicates, ps...)
	return biu
}

// SetItemID sets the itemID field.
func (biu *BankItemUpdate) SetItemID(s string) *BankItemUpdate {
	biu.itemID = &s
	return biu
}

// SetQuantity sets the quantity field.
func (biu *BankItemUpdate) SetQuantity(i int) *BankItemUpdate {
	biu.quantity = &i
	biu.addquantity = nil
	return biu
}

// AddQuantity adds i to quantity.
func (biu *BankItemUpdate) AddQuantity(i int) *BankItemUpdate {
	if biu.addquantity == nil {
		biu.addquantity = &i
	} else {
		*biu.addquantity += i
	}
	return biu
}

// SetGuildID sets the guild edge to Guild by id.
func (biu *BankItemUpdate) SetGuildID(id int) *BankItemUpdate {
	if biu.guild == nil {
		biu.guild = make(map[int]struct{})
	}
	biu.guild[id] = struct{}{}
	return biu
}

// SetNillableGuildID sets the guild edge to Guild by id if the given value is not nil.
func (biu *BankItemUpdate) SetNillableGuildID(id *int) *BankItemUpdate {
	if id != nil {
		biu = biu.SetGuildID(*id)
	}
	return biu
}

// SetGuild sets the guild edge to Guild.
func (biu *BankItemUpdate) SetGuild(g *Guild) *BankItemUpdate {
	return biu.SetGuildID(g.ID)
}

// ClearGuild clears the guild edge to Guild.
func (biu *BankItemUpdate) ClearGuild() *BankItemUpdate {
	biu.clearedGuild = true
	return biu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (biu *BankItemUpdate) Save(ctx context.Context) (int, error) {
	if biu.quantity != nil {
		if err := bankitem.QuantityValidator(*biu.quantity); err != nil {
			return 0, fmt.Errorf("db: validator failed for field \"quantity\": %v", err)
		}
	}
	if len(biu.guild) > 1 {
		return 0, errors.New("db: multiple assignments on a unique edge \"guild\"")
	}
	return biu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BankItemUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BankItemUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BankItemUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biu *BankItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(biu.driver.Dialect())
		selector = builder.Select(bankitem.FieldID).From(builder.Table(bankitem.Table))
	)
	for _, p := range biu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = biu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("db: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := biu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(bankitem.Table).Where(sql.InInts(bankitem.FieldID, ids...))
	)
	if value := biu.itemID; value != nil {
		updater.Set(bankitem.FieldItemID, *value)
	}
	if value := biu.quantity; value != nil {
		updater.Set(bankitem.FieldQuantity, *value)
	}
	if value := biu.addquantity; value != nil {
		updater.Add(bankitem.FieldQuantity, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if biu.clearedGuild {
		query, args := builder.Update(bankitem.GuildTable).
			SetNull(bankitem.GuildColumn).
			Where(sql.InInts(guild.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(biu.guild) > 0 {
		for eid := range biu.guild {
			query, args := builder.Update(bankitem.GuildTable).
				Set(bankitem.GuildColumn, eid).
				Where(sql.InInts(bankitem.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// BankItemUpdateOne is the builder for updating a single BankItem entity.
type BankItemUpdateOne struct {
	config
	id           int
	itemID       *string
	quantity     *int
	addquantity  *int
	guild        map[int]struct{}
	clearedGuild bool
}

// SetItemID sets the itemID field.
func (biuo *BankItemUpdateOne) SetItemID(s string) *BankItemUpdateOne {
	biuo.itemID = &s
	return biuo
}

// SetQuantity sets the quantity field.
func (biuo *BankItemUpdateOne) SetQuantity(i int) *BankItemUpdateOne {
	biuo.quantity = &i
	biuo.addquantity = nil
	return biuo
}

// AddQuantity adds i to quantity.
func (biuo *BankItemUpdateOne) AddQuantity(i int) *BankItemUpdateOne {
	if biuo.addquantity == nil {
		biuo.addquantity = &i
	} else {
		*biuo.addquantity += i
	}
	return biuo
}

// SetGuildID sets the guild edge to Guild by id.
func (biuo *BankItemUpdateOne) SetGuildID(id int) *BankItemUpdateOne {
	if biuo.guild == nil {
		biuo.guild = make(map[int]struct{})
	}
	biuo.guild[id] = struct{}{}
	return biuo
}

// SetNillableGuildID sets the guild edge to Guild by id if the given value is not nil.
func (biuo *BankItemUpdateOne) SetNillableGuildID(id *int) *BankItemUpdateOne {
	if id != nil {
		biuo = biuo.SetGuildID(*id)
	}
	return biuo
}

// SetGuild sets the guild edge to Guild.
func (biuo *BankItemUpdateOne) SetGuild(g *Guild) *BankItemUpdateOne {
	return biuo.SetGuildID(g.ID)
}

// ClearGuild clears the guild edge to Guild.
func (biuo *BankItemUpdateOne) ClearGuild() *BankItemUpdateOne {
	biuo.clearedGuild = true
	return biuo
}

// Save executes the query and returns the updated entity.
func (biuo *BankItemUpdateOne) Save(ctx context.Context) (*BankItem, error) {
	if biuo.quantity != nil {
		if err := bankitem.QuantityValidator(*biuo.quantity); err != nil {
			return nil, fmt.Errorf("db: validator failed for field \"quantity\": %v", err)
		}
	}
	if len(biuo.guild) > 1 {
		return nil, errors.New("db: multiple assignments on a unique edge \"guild\"")
	}
	return biuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BankItemUpdateOne) SaveX(ctx context.Context) *BankItem {
	bi, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return bi
}

// Exec executes the query on the entity.
func (biuo *BankItemUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BankItemUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (biuo *BankItemUpdateOne) sqlSave(ctx context.Context) (bi *BankItem, err error) {
	var (
		builder  = sql.Dialect(biuo.driver.Dialect())
		selector = builder.Select(bankitem.Columns...).From(builder.Table(bankitem.Table))
	)
	bankitem.ID(biuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = biuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		bi = &BankItem{config: biuo.config}
		if err := bi.FromRows(rows); err != nil {
			return nil, fmt.Errorf("db: failed scanning row into BankItem: %v", err)
		}
		id = bi.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("BankItem with id: %v", biuo.id)}
	case n > 1:
		return nil, fmt.Errorf("db: more than one BankItem with the same id: %v", biuo.id)
	}

	tx, err := biuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(bankitem.Table).Where(sql.InInts(bankitem.FieldID, ids...))
	)
	if value := biuo.itemID; value != nil {
		updater.Set(bankitem.FieldItemID, *value)
		bi.ItemID = *value
	}
	if value := biuo.quantity; value != nil {
		updater.Set(bankitem.FieldQuantity, *value)
		bi.Quantity = *value
	}
	if value := biuo.addquantity; value != nil {
		updater.Add(bankitem.FieldQuantity, *value)
		bi.Quantity += *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if biuo.clearedGuild {
		query, args := builder.Update(bankitem.GuildTable).
			SetNull(bankitem.GuildColumn).
			Where(sql.InInts(guild.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(biuo.guild) > 0 {
		for eid := range biuo.guild {
			query, args := builder.Update(bankitem.GuildTable).
				Set(bankitem.GuildColumn, eid).
				Where(sql.InInts(bankitem.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return bi, nil
}
