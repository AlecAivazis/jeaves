// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BankItemDelete is the builder for deleting a BankItem entity.
type BankItemDelete struct {
	config
	predicates []predicate.BankItem
}

// Where adds a new predicate to the delete builder.
func (bid *BankItemDelete) Where(ps ...predicate.BankItem) *BankItemDelete {
	bid.predicates = append(bid.predicates, ps...)
	return bid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bid *BankItemDelete) Exec(ctx context.Context) (int, error) {
	return bid.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (bid *BankItemDelete) ExecX(ctx context.Context) int {
	n, err := bid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bid *BankItemDelete) sqlExec(ctx context.Context) (int, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(bid.driver.Dialect())
	)
	selector := builder.Select().From(sql.Table(bankitem.Table))
	for _, p := range bid.predicates {
		p(selector)
	}
	query, args := builder.Delete(bankitem.Table).FromSelect(selector).Query()
	if err := bid.driver.Exec(ctx, query, args, &res); err != nil {
		return 0, err
	}
	affected, err := res.RowsAffected()
	if err != nil {
		return 0, err
	}
	return int(affected), nil
}

// BankItemDeleteOne is the builder for deleting a single BankItem entity.
type BankItemDeleteOne struct {
	bid *BankItemDelete
}

// Exec executes the deletion query.
func (bido *BankItemDeleteOne) Exec(ctx context.Context) error {
	n, err := bido.bid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{bankitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bido *BankItemDeleteOne) ExecX(ctx context.Context) {
	bido.bid.ExecX(ctx)
}
