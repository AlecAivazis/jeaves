// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildbank"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildBankQuery is the builder for querying GuildBank entities.
type GuildBankQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.GuildBank
	// intermediate queries.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (gbq *GuildBankQuery) Where(ps ...predicate.GuildBank) *GuildBankQuery {
	gbq.predicates = append(gbq.predicates, ps...)
	return gbq
}

// Limit adds a limit step to the query.
func (gbq *GuildBankQuery) Limit(limit int) *GuildBankQuery {
	gbq.limit = &limit
	return gbq
}

// Offset adds an offset step to the query.
func (gbq *GuildBankQuery) Offset(offset int) *GuildBankQuery {
	gbq.offset = &offset
	return gbq
}

// Order adds an order step to the query.
func (gbq *GuildBankQuery) Order(o ...Order) *GuildBankQuery {
	gbq.order = append(gbq.order, o...)
	return gbq
}

// QueryItems chains the current query on the items edge.
func (gbq *GuildBankQuery) QueryItems() *BankItemQuery {
	query := &BankItemQuery{config: gbq.config}

	builder := sql.Dialect(gbq.driver.Dialect())
	t1 := builder.Table(bankitem.Table)
	t2 := gbq.sqlQuery()
	t2.Select(t2.C(guildbank.FieldID))
	query.sql = builder.Select().
		From(t1).
		Join(t2).
		On(t1.C(guildbank.ItemsColumn), t2.C(guildbank.FieldID))
	return query
}

// QueryGuild chains the current query on the guild edge.
func (gbq *GuildBankQuery) QueryGuild() *GuildQuery {
	query := &GuildQuery{config: gbq.config}

	builder := sql.Dialect(gbq.driver.Dialect())
	t1 := builder.Table(guild.Table)
	t2 := gbq.sqlQuery()
	t2.Select(t2.C(guildbank.GuildColumn))
	query.sql = builder.Select(t1.Columns(guild.Columns...)...).
		From(t1).
		Join(t2).
		On(t1.C(guild.FieldID), t2.C(guildbank.GuildColumn))
	return query
}

// First returns the first GuildBank entity in the query. Returns *ErrNotFound when no guildbank was found.
func (gbq *GuildBankQuery) First(ctx context.Context) (*GuildBank, error) {
	gbs, err := gbq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(gbs) == 0 {
		return nil, &ErrNotFound{guildbank.Label}
	}
	return gbs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gbq *GuildBankQuery) FirstX(ctx context.Context) *GuildBank {
	gb, err := gbq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return gb
}

// FirstID returns the first GuildBank id in the query. Returns *ErrNotFound when no id was found.
func (gbq *GuildBankQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gbq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{guildbank.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (gbq *GuildBankQuery) FirstXID(ctx context.Context) int {
	id, err := gbq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only GuildBank entity in the query, returns an error if not exactly one entity was returned.
func (gbq *GuildBankQuery) Only(ctx context.Context) (*GuildBank, error) {
	gbs, err := gbq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(gbs) {
	case 1:
		return gbs[0], nil
	case 0:
		return nil, &ErrNotFound{guildbank.Label}
	default:
		return nil, &ErrNotSingular{guildbank.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gbq *GuildBankQuery) OnlyX(ctx context.Context) *GuildBank {
	gb, err := gbq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return gb
}

// OnlyID returns the only GuildBank id in the query, returns an error if not exactly one id was returned.
func (gbq *GuildBankQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gbq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{guildbank.Label}
	default:
		err = &ErrNotSingular{guildbank.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (gbq *GuildBankQuery) OnlyXID(ctx context.Context) int {
	id, err := gbq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GuildBanks.
func (gbq *GuildBankQuery) All(ctx context.Context) ([]*GuildBank, error) {
	return gbq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gbq *GuildBankQuery) AllX(ctx context.Context) []*GuildBank {
	gbs, err := gbq.All(ctx)
	if err != nil {
		panic(err)
	}
	return gbs
}

// IDs executes the query and returns a list of GuildBank ids.
func (gbq *GuildBankQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := gbq.Select(guildbank.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gbq *GuildBankQuery) IDsX(ctx context.Context) []int {
	ids, err := gbq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gbq *GuildBankQuery) Count(ctx context.Context) (int, error) {
	return gbq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gbq *GuildBankQuery) CountX(ctx context.Context) int {
	count, err := gbq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gbq *GuildBankQuery) Exist(ctx context.Context) (bool, error) {
	return gbq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gbq *GuildBankQuery) ExistX(ctx context.Context) bool {
	exist, err := gbq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gbq *GuildBankQuery) Clone() *GuildBankQuery {
	return &GuildBankQuery{
		config:     gbq.config,
		limit:      gbq.limit,
		offset:     gbq.offset,
		order:      append([]Order{}, gbq.order...),
		unique:     append([]string{}, gbq.unique...),
		predicates: append([]predicate.GuildBank{}, gbq.predicates...),
		// clone intermediate queries.
		sql: gbq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ChannelID string `json:"channelID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GuildBank.Query().
//		GroupBy(guildbank.FieldChannelID).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
//
func (gbq *GuildBankQuery) GroupBy(field string, fields ...string) *GuildBankGroupBy {
	group := &GuildBankGroupBy{config: gbq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = gbq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		ChannelID string `json:"channelID,omitempty"`
//	}
//
//	client.GuildBank.Query().
//		Select(guildbank.FieldChannelID).
//		Scan(ctx, &v)
//
func (gbq *GuildBankQuery) Select(field string, fields ...string) *GuildBankSelect {
	selector := &GuildBankSelect{config: gbq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = gbq.sqlQuery()
	return selector
}

func (gbq *GuildBankQuery) sqlAll(ctx context.Context) ([]*GuildBank, error) {
	rows := &sql.Rows{}
	selector := gbq.sqlQuery()
	if unique := gbq.unique; len(unique) == 0 {
		selector.Distinct()
	}
	query, args := selector.Query()
	if err := gbq.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var gbs GuildBanks
	if err := gbs.FromRows(rows); err != nil {
		return nil, err
	}
	gbs.config(gbq.config)
	return gbs, nil
}

func (gbq *GuildBankQuery) sqlCount(ctx context.Context) (int, error) {
	rows := &sql.Rows{}
	selector := gbq.sqlQuery()
	unique := []string{guildbank.FieldID}
	if len(gbq.unique) > 0 {
		unique = gbq.unique
	}
	selector.Count(sql.Distinct(selector.Columns(unique...)...))
	query, args := selector.Query()
	if err := gbq.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	if !rows.Next() {
		return 0, errors.New("db: no rows found")
	}
	var n int
	if err := rows.Scan(&n); err != nil {
		return 0, fmt.Errorf("db: failed reading count: %v", err)
	}
	return n, nil
}

func (gbq *GuildBankQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := gbq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("db: check existence: %v", err)
	}
	return n > 0, nil
}

func (gbq *GuildBankQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(gbq.driver.Dialect())
	t1 := builder.Table(guildbank.Table)
	selector := builder.Select(t1.Columns(guildbank.Columns...)...).From(t1)
	if gbq.sql != nil {
		selector = gbq.sql
		selector.Select(selector.Columns(guildbank.Columns...)...)
	}
	for _, p := range gbq.predicates {
		p(selector)
	}
	for _, p := range gbq.order {
		p(selector)
	}
	if offset := gbq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gbq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GuildBankGroupBy is the builder for group-by GuildBank entities.
type GuildBankGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate queries.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gbgb *GuildBankGroupBy) Aggregate(fns ...Aggregate) *GuildBankGroupBy {
	gbgb.fns = append(gbgb.fns, fns...)
	return gbgb
}

// Scan applies the group-by query and scan the result into the given value.
func (gbgb *GuildBankGroupBy) Scan(ctx context.Context, v interface{}) error {
	return gbgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gbgb *GuildBankGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := gbgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (gbgb *GuildBankGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(gbgb.fields) > 1 {
		return nil, errors.New("db: GuildBankGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := gbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gbgb *GuildBankGroupBy) StringsX(ctx context.Context) []string {
	v, err := gbgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (gbgb *GuildBankGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(gbgb.fields) > 1 {
		return nil, errors.New("db: GuildBankGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := gbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gbgb *GuildBankGroupBy) IntsX(ctx context.Context) []int {
	v, err := gbgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (gbgb *GuildBankGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(gbgb.fields) > 1 {
		return nil, errors.New("db: GuildBankGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := gbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gbgb *GuildBankGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := gbgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (gbgb *GuildBankGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(gbgb.fields) > 1 {
		return nil, errors.New("db: GuildBankGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := gbgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gbgb *GuildBankGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := gbgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gbgb *GuildBankGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gbgb.sqlQuery().Query()
	if err := gbgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gbgb *GuildBankGroupBy) sqlQuery() *sql.Selector {
	selector := gbgb.sql
	columns := make([]string, 0, len(gbgb.fields)+len(gbgb.fns))
	columns = append(columns, gbgb.fields...)
	for _, fn := range gbgb.fns {
		columns = append(columns, fn.SQL(selector))
	}
	return selector.Select(columns...).GroupBy(gbgb.fields...)
}

// GuildBankSelect is the builder for select fields of GuildBank entities.
type GuildBankSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (gbs *GuildBankSelect) Scan(ctx context.Context, v interface{}) error {
	return gbs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (gbs *GuildBankSelect) ScanX(ctx context.Context, v interface{}) {
	if err := gbs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (gbs *GuildBankSelect) Strings(ctx context.Context) ([]string, error) {
	if len(gbs.fields) > 1 {
		return nil, errors.New("db: GuildBankSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := gbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (gbs *GuildBankSelect) StringsX(ctx context.Context) []string {
	v, err := gbs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (gbs *GuildBankSelect) Ints(ctx context.Context) ([]int, error) {
	if len(gbs.fields) > 1 {
		return nil, errors.New("db: GuildBankSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := gbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (gbs *GuildBankSelect) IntsX(ctx context.Context) []int {
	v, err := gbs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (gbs *GuildBankSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(gbs.fields) > 1 {
		return nil, errors.New("db: GuildBankSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := gbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (gbs *GuildBankSelect) Float64sX(ctx context.Context) []float64 {
	v, err := gbs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (gbs *GuildBankSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(gbs.fields) > 1 {
		return nil, errors.New("db: GuildBankSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := gbs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (gbs *GuildBankSelect) BoolsX(ctx context.Context) []bool {
	v, err := gbs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gbs *GuildBankSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gbs.sqlQuery().Query()
	if err := gbs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gbs *GuildBankSelect) sqlQuery() sql.Querier {
	view := "guildbank_view"
	return sql.Dialect(gbs.driver.Dialect()).
		Select(gbs.fields...).From(gbs.sql.As(view))
}
