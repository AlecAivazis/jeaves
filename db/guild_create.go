// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildbank"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	discordID *string
	bank      map[int]struct{}
}

// SetDiscordID sets the discordID field.
func (gc *GuildCreate) SetDiscordID(s string) *GuildCreate {
	gc.discordID = &s
	return gc
}

// SetBankID sets the bank edge to GuildBank by id.
func (gc *GuildCreate) SetBankID(id int) *GuildCreate {
	if gc.bank == nil {
		gc.bank = make(map[int]struct{})
	}
	gc.bank[id] = struct{}{}
	return gc
}

// SetNillableBankID sets the bank edge to GuildBank by id if the given value is not nil.
func (gc *GuildCreate) SetNillableBankID(id *int) *GuildCreate {
	if id != nil {
		gc = gc.SetBankID(*id)
	}
	return gc
}

// SetBank sets the bank edge to GuildBank.
func (gc *GuildCreate) SetBank(g *GuildBank) *GuildCreate {
	return gc.SetBankID(g.ID)
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	if gc.discordID == nil {
		return nil, errors.New("db: missing required field \"discordID\"")
	}
	if len(gc.bank) > 1 {
		return nil, errors.New("db: multiple assignments on a unique edge \"bank\"")
	}
	return gc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(gc.driver.Dialect())
		gu      = &Guild{config: gc.config}
	)
	tx, err := gc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(guild.Table).Default()
	if value := gc.discordID; value != nil {
		insert.Set(guild.FieldDiscordID, *value)
		gu.DiscordID = *value
	}
	id, err := insertLastID(ctx, tx, insert.Returning(guild.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	gu.ID = int(id)
	if len(gc.bank) > 0 {
		eid := keys(gc.bank)[0]
		query, args := builder.Update(guild.BankTable).
			Set(guild.BankColumn, id).
			Where(sql.EQ(guildbank.FieldID, eid).And().IsNull(guild.BankColumn)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(gc.bank) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(gc.bank))})
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return gu, nil
}
