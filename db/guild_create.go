// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildchannel"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	discordID *string
	channels  map[int]struct{}
	bank      map[int]struct{}
}

// SetDiscordID sets the discordID field.
func (gc *GuildCreate) SetDiscordID(s string) *GuildCreate {
	gc.discordID = &s
	return gc
}

// AddChannelIDs adds the channels edge to GuildChannel by ids.
func (gc *GuildCreate) AddChannelIDs(ids ...int) *GuildCreate {
	if gc.channels == nil {
		gc.channels = make(map[int]struct{})
	}
	for i := range ids {
		gc.channels[ids[i]] = struct{}{}
	}
	return gc
}

// AddChannels adds the channels edges to GuildChannel.
func (gc *GuildCreate) AddChannels(g ...*GuildChannel) *GuildCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gc.AddChannelIDs(ids...)
}

// AddBankIDs adds the bank edge to BankItem by ids.
func (gc *GuildCreate) AddBankIDs(ids ...int) *GuildCreate {
	if gc.bank == nil {
		gc.bank = make(map[int]struct{})
	}
	for i := range ids {
		gc.bank[ids[i]] = struct{}{}
	}
	return gc
}

// AddBank adds the bank edges to BankItem.
func (gc *GuildCreate) AddBank(b ...*BankItem) *GuildCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gc.AddBankIDs(ids...)
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	if gc.discordID == nil {
		return nil, errors.New("db: missing required field \"discordID\"")
	}
	return gc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	var (
		res     sql.Result
		builder = sql.Dialect(gc.driver.Dialect())
		gu      = &Guild{config: gc.config}
	)
	tx, err := gc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(guild.Table).Default()
	if value := gc.discordID; value != nil {
		insert.Set(guild.FieldDiscordID, *value)
		gu.DiscordID = *value
	}
	id, err := insertLastID(ctx, tx, insert.Returning(guild.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	gu.ID = int(id)
	if len(gc.channels) > 0 {
		p := sql.P()
		for eid := range gc.channels {
			p.Or().EQ(guildchannel.FieldID, eid)
		}
		query, args := builder.Update(guild.ChannelsTable).
			Set(guild.ChannelsColumn, id).
			Where(sql.And(p, sql.IsNull(guild.ChannelsColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(gc.channels) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"channels\" %v already connected to a different \"Guild\"", keys(gc.channels))})
		}
	}
	if len(gc.bank) > 0 {
		p := sql.P()
		for eid := range gc.bank {
			p.Or().EQ(bankitem.FieldID, eid)
		}
		query, args := builder.Update(guild.BankTable).
			Set(guild.BankColumn, id).
			Where(sql.And(p, sql.IsNull(guild.BankColumn))).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
		affected, err := res.RowsAffected()
		if err != nil {
			return nil, rollback(tx, err)
		}
		if int(affected) < len(gc.bank) {
			return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"bank\" %v already connected to a different \"Guild\"", keys(gc.bank))})
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return gu, nil
}
