// Code generated by entc, DO NOT EDIT.

package guild

import (
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// ID applies equality check predicate on the "id" field. It's identical to IDEQ.
func ID(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), v))
		},
	)
}

// IDEQ applies the EQ predicate on the "id" field.
func IDEQ(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), v))
		},
	)
}

// IDNEQ applies the NEQ predicate on the "id" field.
func IDNEQ(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), v))
		},
	)
}

// IDIn applies the In predicate on the "id" field.
func IDIn(vs ...string) predicate.Guild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the "id" field.
func IDNotIn(vs ...string) predicate.Guild {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Guild(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the "id" field.
func IDGT(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), v))
		},
	)
}

// IDGTE applies the GTE predicate on the "id" field.
func IDGTE(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), v))
		},
	)
}

// IDLT applies the LT predicate on the "id" field.
func IDLT(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), v))
		},
	)
}

// IDLTE applies the LTE predicate on the "id" field.
func IDLTE(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), v))
		},
	)
}

// IDEqualFold applies the EqualFold predicate on the "id" field.
func IDEqualFold(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldID), v))
		},
	)
}

// IDContainsFold applies the ContainsFold predicate on the "id" field.
func IDContainsFold(v string) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldID), v))
		},
	)
}

// HasChannels applies the HasEdge predicate on the "channels" edge.
func HasChannels() predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			t1 := s.Table()
			builder := sql.Dialect(s.Dialect())
			s.Where(
				sql.In(
					t1.C(FieldID),
					builder.Select(ChannelsColumn).
						From(builder.Table(ChannelsTable)).
						Where(sql.NotNull(ChannelsColumn)),
				),
			)
		},
	)
}

// HasChannelsWith applies the HasEdge predicate on the "channels" edge with a given conditions (other predicates).
func HasChannelsWith(preds ...predicate.GuildChannel) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			builder := sql.Dialect(s.Dialect())
			t1 := s.Table()
			t2 := builder.Select(ChannelsColumn).From(builder.Table(ChannelsTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(FieldID), t2))
		},
	)
}

// HasBank applies the HasEdge predicate on the "bank" edge.
func HasBank() predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			t1 := s.Table()
			builder := sql.Dialect(s.Dialect())
			s.Where(
				sql.In(
					t1.C(FieldID),
					builder.Select(BankColumn).
						From(builder.Table(BankTable)).
						Where(sql.NotNull(BankColumn)),
				),
			)
		},
	)
}

// HasBankWith applies the HasEdge predicate on the "bank" edge with a given conditions (other predicates).
func HasBankWith(preds ...predicate.BankItem) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			builder := sql.Dialect(s.Dialect())
			t1 := s.Table()
			t2 := builder.Select(BankColumn).From(builder.Table(BankTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(FieldID), t2))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guild) predicate.Guild {
	return predicate.Guild(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
