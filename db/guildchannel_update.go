// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/guildchannel"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// GuildChannelUpdate is the builder for updating GuildChannel entities.
type GuildChannelUpdate struct {
	config
	channel      *string
	guild        map[int]struct{}
	clearedGuild bool
	predicates   []predicate.GuildChannel
}

// Where adds a new predicate for the builder.
func (gcu *GuildChannelUpdate) Where(ps ...predicate.GuildChannel) *GuildChannelUpdate {
	gcu.predicates = append(gcu.predicates, ps...)
	return gcu
}

// SetChannel sets the channel field.
func (gcu *GuildChannelUpdate) SetChannel(s string) *GuildChannelUpdate {
	gcu.channel = &s
	return gcu
}

// SetGuildID sets the guild edge to Guild by id.
func (gcu *GuildChannelUpdate) SetGuildID(id int) *GuildChannelUpdate {
	if gcu.guild == nil {
		gcu.guild = make(map[int]struct{})
	}
	gcu.guild[id] = struct{}{}
	return gcu
}

// SetNillableGuildID sets the guild edge to Guild by id if the given value is not nil.
func (gcu *GuildChannelUpdate) SetNillableGuildID(id *int) *GuildChannelUpdate {
	if id != nil {
		gcu = gcu.SetGuildID(*id)
	}
	return gcu
}

// SetGuild sets the guild edge to Guild.
func (gcu *GuildChannelUpdate) SetGuild(g *Guild) *GuildChannelUpdate {
	return gcu.SetGuildID(g.ID)
}

// ClearGuild clears the guild edge to Guild.
func (gcu *GuildChannelUpdate) ClearGuild() *GuildChannelUpdate {
	gcu.clearedGuild = true
	return gcu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gcu *GuildChannelUpdate) Save(ctx context.Context) (int, error) {
	if len(gcu.guild) > 1 {
		return 0, errors.New("db: multiple assignments on a unique edge \"guild\"")
	}
	return gcu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (gcu *GuildChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := gcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gcu *GuildChannelUpdate) Exec(ctx context.Context) error {
	_, err := gcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcu *GuildChannelUpdate) ExecX(ctx context.Context) {
	if err := gcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcu *GuildChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(gcu.driver.Dialect())
		selector = builder.Select(guildchannel.FieldID).From(builder.Table(guildchannel.Table))
	)
	for _, p := range gcu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = gcu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("db: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := gcu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guildchannel.Table).Where(sql.InInts(guildchannel.FieldID, ids...))
	)
	if value := gcu.channel; value != nil {
		updater.Set(guildchannel.FieldChannel, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if gcu.clearedGuild {
		query, args := builder.Update(guildchannel.GuildTable).
			SetNull(guildchannel.GuildColumn).
			Where(sql.InInts(guild.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(gcu.guild) > 0 {
		for eid := range gcu.guild {
			query, args := builder.Update(guildchannel.GuildTable).
				Set(guildchannel.GuildColumn, eid).
				Where(sql.InInts(guildchannel.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// GuildChannelUpdateOne is the builder for updating a single GuildChannel entity.
type GuildChannelUpdateOne struct {
	config
	id           int
	channel      *string
	guild        map[int]struct{}
	clearedGuild bool
}

// SetChannel sets the channel field.
func (gcuo *GuildChannelUpdateOne) SetChannel(s string) *GuildChannelUpdateOne {
	gcuo.channel = &s
	return gcuo
}

// SetGuildID sets the guild edge to Guild by id.
func (gcuo *GuildChannelUpdateOne) SetGuildID(id int) *GuildChannelUpdateOne {
	if gcuo.guild == nil {
		gcuo.guild = make(map[int]struct{})
	}
	gcuo.guild[id] = struct{}{}
	return gcuo
}

// SetNillableGuildID sets the guild edge to Guild by id if the given value is not nil.
func (gcuo *GuildChannelUpdateOne) SetNillableGuildID(id *int) *GuildChannelUpdateOne {
	if id != nil {
		gcuo = gcuo.SetGuildID(*id)
	}
	return gcuo
}

// SetGuild sets the guild edge to Guild.
func (gcuo *GuildChannelUpdateOne) SetGuild(g *Guild) *GuildChannelUpdateOne {
	return gcuo.SetGuildID(g.ID)
}

// ClearGuild clears the guild edge to Guild.
func (gcuo *GuildChannelUpdateOne) ClearGuild() *GuildChannelUpdateOne {
	gcuo.clearedGuild = true
	return gcuo
}

// Save executes the query and returns the updated entity.
func (gcuo *GuildChannelUpdateOne) Save(ctx context.Context) (*GuildChannel, error) {
	if len(gcuo.guild) > 1 {
		return nil, errors.New("db: multiple assignments on a unique edge \"guild\"")
	}
	return gcuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (gcuo *GuildChannelUpdateOne) SaveX(ctx context.Context) *GuildChannel {
	gc, err := gcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gc
}

// Exec executes the query on the entity.
func (gcuo *GuildChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := gcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcuo *GuildChannelUpdateOne) ExecX(ctx context.Context) {
	if err := gcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gcuo *GuildChannelUpdateOne) sqlSave(ctx context.Context) (gc *GuildChannel, err error) {
	var (
		builder  = sql.Dialect(gcuo.driver.Dialect())
		selector = builder.Select(guildchannel.Columns...).From(builder.Table(guildchannel.Table))
	)
	guildchannel.ID(gcuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = gcuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		gc = &GuildChannel{config: gcuo.config}
		if err := gc.FromRows(rows); err != nil {
			return nil, fmt.Errorf("db: failed scanning row into GuildChannel: %v", err)
		}
		id = gc.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("GuildChannel with id: %v", gcuo.id)}
	case n > 1:
		return nil, fmt.Errorf("db: more than one GuildChannel with the same id: %v", gcuo.id)
	}

	tx, err := gcuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(guildchannel.Table).Where(sql.InInts(guildchannel.FieldID, ids...))
	)
	if value := gcuo.channel; value != nil {
		updater.Set(guildchannel.FieldChannel, *value)
		gc.Channel = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if gcuo.clearedGuild {
		query, args := builder.Update(guildchannel.GuildTable).
			SetNull(guildchannel.GuildColumn).
			Where(sql.InInts(guild.FieldID, ids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(gcuo.guild) > 0 {
		for eid := range gcuo.guild {
			query, args := builder.Update(guildchannel.GuildTable).
				Set(guildchannel.GuildColumn, eid).
				Where(sql.InInts(guildchannel.FieldID, ids...)).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return gc, nil
}
