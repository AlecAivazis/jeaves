// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// BankItem is the model entity for the BankItem schema.
type BankItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ItemID holds the value of the "itemID" field.
	ItemID string `json:"itemID,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
}

// FromRows scans the sql response data into BankItem.
func (bi *BankItem) FromRows(rows *sql.Rows) error {
	var vbi struct {
		ID       int
		ItemID   sql.NullString
		Quantity sql.NullInt64
	}
	// the order here should be the same as in the `bankitem.Columns`.
	if err := rows.Scan(
		&vbi.ID,
		&vbi.ItemID,
		&vbi.Quantity,
	); err != nil {
		return err
	}
	bi.ID = vbi.ID
	bi.ItemID = vbi.ItemID.String
	bi.Quantity = int(vbi.Quantity.Int64)
	return nil
}

// QueryBank queries the bank edge of the BankItem.
func (bi *BankItem) QueryBank() *GuildBankQuery {
	return (&BankItemClient{bi.config}).QueryBank(bi)
}

// Update returns a builder for updating this BankItem.
// Note that, you need to call BankItem.Unwrap() before calling this method, if this BankItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BankItem) Update() *BankItemUpdateOne {
	return (&BankItemClient{bi.config}).UpdateOne(bi)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bi *BankItem) Unwrap() *BankItem {
	tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("db: BankItem is not a transactional entity")
	}
	bi.config.driver = tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BankItem) String() string {
	var builder strings.Builder
	builder.WriteString("BankItem(")
	builder.WriteString(fmt.Sprintf("id=%v", bi.ID))
	builder.WriteString(", itemID=")
	builder.WriteString(bi.ItemID)
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", bi.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// BankItems is a parsable slice of BankItem.
type BankItems []*BankItem

// FromRows scans the sql response data into BankItems.
func (bi *BankItems) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vbi := &BankItem{}
		if err := vbi.FromRows(rows); err != nil {
			return err
		}
		*bi = append(*bi, vbi)
	}
	return nil
}

func (bi BankItems) config(cfg config) {
	for _i := range bi {
		bi[_i].config = cfg
	}
}
