// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Guild is the model entity for the Guild schema.
type Guild struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DiscordID holds the value of the "discordID" field.
	DiscordID string `json:"discordID,omitempty"`
}

// FromRows scans the sql response data into Guild.
func (gu *Guild) FromRows(rows *sql.Rows) error {
	var vgu struct {
		ID        int
		DiscordID sql.NullString
	}
	// the order here should be the same as in the `guild.Columns`.
	if err := rows.Scan(
		&vgu.ID,
		&vgu.DiscordID,
	); err != nil {
		return err
	}
	gu.ID = vgu.ID
	gu.DiscordID = vgu.DiscordID.String
	return nil
}

// QueryChannels queries the channels edge of the Guild.
func (gu *Guild) QueryChannels() *GuildChannelQuery {
	return (&GuildClient{gu.config}).QueryChannels(gu)
}

// QueryBank queries the bank edge of the Guild.
func (gu *Guild) QueryBank() *BankItemQuery {
	return (&GuildClient{gu.config}).QueryBank(gu)
}

// Update returns a builder for updating this Guild.
// Note that, you need to call Guild.Unwrap() before calling this method, if this Guild
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *Guild) Update() *GuildUpdateOne {
	return (&GuildClient{gu.config}).UpdateOne(gu)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (gu *Guild) Unwrap() *Guild {
	tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("db: Guild is not a transactional entity")
	}
	gu.config.driver = tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *Guild) String() string {
	var builder strings.Builder
	builder.WriteString("Guild(")
	builder.WriteString(fmt.Sprintf("id=%v", gu.ID))
	builder.WriteString(", discordID=")
	builder.WriteString(gu.DiscordID)
	builder.WriteByte(')')
	return builder.String()
}

// Guilds is a parsable slice of Guild.
type Guilds []*Guild

// FromRows scans the sql response data into Guilds.
func (gu *Guilds) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vgu := &Guild{}
		if err := vgu.FromRows(rows); err != nil {
			return err
		}
		*gu = append(*gu, vgu)
	}
	return nil
}

func (gu Guilds) config(cfg config) {
	for _i := range gu {
		gu[_i].config = cfg
	}
}
