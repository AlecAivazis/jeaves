// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/AlecAivazis/jeeves/db/bankitem"
	"github.com/AlecAivazis/jeeves/db/guild"
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// BankItemQuery is the builder for querying BankItem entities.
type BankItemQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.BankItem
	// intermediate queries.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (biq *BankItemQuery) Where(ps ...predicate.BankItem) *BankItemQuery {
	biq.predicates = append(biq.predicates, ps...)
	return biq
}

// Limit adds a limit step to the query.
func (biq *BankItemQuery) Limit(limit int) *BankItemQuery {
	biq.limit = &limit
	return biq
}

// Offset adds an offset step to the query.
func (biq *BankItemQuery) Offset(offset int) *BankItemQuery {
	biq.offset = &offset
	return biq
}

// Order adds an order step to the query.
func (biq *BankItemQuery) Order(o ...Order) *BankItemQuery {
	biq.order = append(biq.order, o...)
	return biq
}

// QueryGuild chains the current query on the guild edge.
func (biq *BankItemQuery) QueryGuild() *GuildQuery {
	query := &GuildQuery{config: biq.config}

	builder := sql.Dialect(biq.driver.Dialect())
	t1 := builder.Table(guild.Table)
	t2 := biq.sqlQuery()
	t2.Select(t2.C(bankitem.GuildColumn))
	query.sql = builder.Select(t1.Columns(guild.Columns...)...).
		From(t1).
		Join(t2).
		On(t1.C(guild.FieldID), t2.C(bankitem.GuildColumn))
	return query
}

// First returns the first BankItem entity in the query. Returns *ErrNotFound when no bankitem was found.
func (biq *BankItemQuery) First(ctx context.Context) (*BankItem, error) {
	bis, err := biq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(bis) == 0 {
		return nil, &ErrNotFound{bankitem.Label}
	}
	return bis[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (biq *BankItemQuery) FirstX(ctx context.Context) *BankItem {
	bi, err := biq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return bi
}

// FirstID returns the first BankItem id in the query. Returns *ErrNotFound when no id was found.
func (biq *BankItemQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = biq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &ErrNotFound{bankitem.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (biq *BankItemQuery) FirstXID(ctx context.Context) int {
	id, err := biq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only BankItem entity in the query, returns an error if not exactly one entity was returned.
func (biq *BankItemQuery) Only(ctx context.Context) (*BankItem, error) {
	bis, err := biq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(bis) {
	case 1:
		return bis[0], nil
	case 0:
		return nil, &ErrNotFound{bankitem.Label}
	default:
		return nil, &ErrNotSingular{bankitem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (biq *BankItemQuery) OnlyX(ctx context.Context) *BankItem {
	bi, err := biq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return bi
}

// OnlyID returns the only BankItem id in the query, returns an error if not exactly one id was returned.
func (biq *BankItemQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = biq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &ErrNotFound{bankitem.Label}
	default:
		err = &ErrNotSingular{bankitem.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (biq *BankItemQuery) OnlyXID(ctx context.Context) int {
	id, err := biq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BankItems.
func (biq *BankItemQuery) All(ctx context.Context) ([]*BankItem, error) {
	return biq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (biq *BankItemQuery) AllX(ctx context.Context) []*BankItem {
	bis, err := biq.All(ctx)
	if err != nil {
		panic(err)
	}
	return bis
}

// IDs executes the query and returns a list of BankItem ids.
func (biq *BankItemQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := biq.Select(bankitem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (biq *BankItemQuery) IDsX(ctx context.Context) []int {
	ids, err := biq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (biq *BankItemQuery) Count(ctx context.Context) (int, error) {
	return biq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (biq *BankItemQuery) CountX(ctx context.Context) int {
	count, err := biq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (biq *BankItemQuery) Exist(ctx context.Context) (bool, error) {
	return biq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (biq *BankItemQuery) ExistX(ctx context.Context) bool {
	exist, err := biq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (biq *BankItemQuery) Clone() *BankItemQuery {
	return &BankItemQuery{
		config:     biq.config,
		limit:      biq.limit,
		offset:     biq.offset,
		order:      append([]Order{}, biq.order...),
		unique:     append([]string{}, biq.unique...),
		predicates: append([]predicate.BankItem{}, biq.predicates...),
		// clone intermediate queries.
		sql: biq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ItemID string `json:"itemID,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BankItem.Query().
//		GroupBy(bankitem.FieldItemID).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
//
func (biq *BankItemQuery) GroupBy(field string, fields ...string) *BankItemGroupBy {
	group := &BankItemGroupBy{config: biq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = biq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		ItemID string `json:"itemID,omitempty"`
//	}
//
//	client.BankItem.Query().
//		Select(bankitem.FieldItemID).
//		Scan(ctx, &v)
//
func (biq *BankItemQuery) Select(field string, fields ...string) *BankItemSelect {
	selector := &BankItemSelect{config: biq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = biq.sqlQuery()
	return selector
}

func (biq *BankItemQuery) sqlAll(ctx context.Context) ([]*BankItem, error) {
	rows := &sql.Rows{}
	selector := biq.sqlQuery()
	if unique := biq.unique; len(unique) == 0 {
		selector.Distinct()
	}
	query, args := selector.Query()
	if err := biq.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var bis BankItems
	if err := bis.FromRows(rows); err != nil {
		return nil, err
	}
	bis.config(biq.config)
	return bis, nil
}

func (biq *BankItemQuery) sqlCount(ctx context.Context) (int, error) {
	rows := &sql.Rows{}
	selector := biq.sqlQuery()
	unique := []string{bankitem.FieldID}
	if len(biq.unique) > 0 {
		unique = biq.unique
	}
	selector.Count(sql.Distinct(selector.Columns(unique...)...))
	query, args := selector.Query()
	if err := biq.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	if !rows.Next() {
		return 0, errors.New("db: no rows found")
	}
	var n int
	if err := rows.Scan(&n); err != nil {
		return 0, fmt.Errorf("db: failed reading count: %v", err)
	}
	return n, nil
}

func (biq *BankItemQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := biq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("db: check existence: %v", err)
	}
	return n > 0, nil
}

func (biq *BankItemQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(biq.driver.Dialect())
	t1 := builder.Table(bankitem.Table)
	selector := builder.Select(t1.Columns(bankitem.Columns...)...).From(t1)
	if biq.sql != nil {
		selector = biq.sql
		selector.Select(selector.Columns(bankitem.Columns...)...)
	}
	for _, p := range biq.predicates {
		p(selector)
	}
	for _, p := range biq.order {
		p(selector)
	}
	if offset := biq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := biq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BankItemGroupBy is the builder for group-by BankItem entities.
type BankItemGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate queries.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bigb *BankItemGroupBy) Aggregate(fns ...Aggregate) *BankItemGroupBy {
	bigb.fns = append(bigb.fns, fns...)
	return bigb
}

// Scan applies the group-by query and scan the result into the given value.
func (bigb *BankItemGroupBy) Scan(ctx context.Context, v interface{}) error {
	return bigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bigb *BankItemGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := bigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (bigb *BankItemGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("db: BankItemGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bigb *BankItemGroupBy) StringsX(ctx context.Context) []string {
	v, err := bigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (bigb *BankItemGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("db: BankItemGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bigb *BankItemGroupBy) IntsX(ctx context.Context) []int {
	v, err := bigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (bigb *BankItemGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("db: BankItemGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bigb *BankItemGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := bigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (bigb *BankItemGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(bigb.fields) > 1 {
		return nil, errors.New("db: BankItemGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := bigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bigb *BankItemGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := bigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bigb *BankItemGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bigb.sqlQuery().Query()
	if err := bigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bigb *BankItemGroupBy) sqlQuery() *sql.Selector {
	selector := bigb.sql
	columns := make([]string, 0, len(bigb.fields)+len(bigb.fns))
	columns = append(columns, bigb.fields...)
	for _, fn := range bigb.fns {
		columns = append(columns, fn.SQL(selector))
	}
	return selector.Select(columns...).GroupBy(bigb.fields...)
}

// BankItemSelect is the builder for select fields of BankItem entities.
type BankItemSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (bis *BankItemSelect) Scan(ctx context.Context, v interface{}) error {
	return bis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (bis *BankItemSelect) ScanX(ctx context.Context, v interface{}) {
	if err := bis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (bis *BankItemSelect) Strings(ctx context.Context) ([]string, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("db: BankItemSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (bis *BankItemSelect) StringsX(ctx context.Context) []string {
	v, err := bis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (bis *BankItemSelect) Ints(ctx context.Context) ([]int, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("db: BankItemSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (bis *BankItemSelect) IntsX(ctx context.Context) []int {
	v, err := bis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (bis *BankItemSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("db: BankItemSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (bis *BankItemSelect) Float64sX(ctx context.Context) []float64 {
	v, err := bis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (bis *BankItemSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(bis.fields) > 1 {
		return nil, errors.New("db: BankItemSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := bis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (bis *BankItemSelect) BoolsX(ctx context.Context) []bool {
	v, err := bis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bis *BankItemSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bis.sqlQuery().Query()
	if err := bis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bis *BankItemSelect) sqlQuery() sql.Querier {
	view := "bankitem_view"
	return sql.Dialect(bis.driver.Dialect()).
		Select(bis.fields...).From(bis.sql.As(view))
}
