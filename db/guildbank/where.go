// Code generated by entc, DO NOT EDIT.

package guildbank

import (
	"github.com/AlecAivazis/jeeves/db/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldID), id))
		},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.In(s.C(FieldID), v...))
		},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(ids) == 0 {
				s.Where(sql.False())
				return
			}
			v := make([]interface{}, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
			s.Where(sql.NotIn(s.C(FieldID), v...))
		},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldID), id))
		},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldID), id))
		},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldID), id))
		},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldID), id))
		},
	)
}

// ChannelID applies equality check predicate on the "channelID" field. It's identical to ChannelIDEQ.
func ChannelID(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldChannelID), v))
		},
	)
}

// DisplayMessageID applies equality check predicate on the "displayMessageID" field. It's identical to DisplayMessageIDEQ.
func DisplayMessageID(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDisplayMessageID), v))
		},
	)
}

// ChannelIDEQ applies the EQ predicate on the "channelID" field.
func ChannelIDEQ(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDNEQ applies the NEQ predicate on the "channelID" field.
func ChannelIDNEQ(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDIn applies the In predicate on the "channelID" field.
func ChannelIDIn(vs ...string) predicate.GuildBank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldChannelID), v...))
		},
	)
}

// ChannelIDNotIn applies the NotIn predicate on the "channelID" field.
func ChannelIDNotIn(vs ...string) predicate.GuildBank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldChannelID), v...))
		},
	)
}

// ChannelIDGT applies the GT predicate on the "channelID" field.
func ChannelIDGT(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDGTE applies the GTE predicate on the "channelID" field.
func ChannelIDGTE(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDLT applies the LT predicate on the "channelID" field.
func ChannelIDLT(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDLTE applies the LTE predicate on the "channelID" field.
func ChannelIDLTE(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDContains applies the Contains predicate on the "channelID" field.
func ChannelIDContains(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDHasPrefix applies the HasPrefix predicate on the "channelID" field.
func ChannelIDHasPrefix(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDHasSuffix applies the HasSuffix predicate on the "channelID" field.
func ChannelIDHasSuffix(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDEqualFold applies the EqualFold predicate on the "channelID" field.
func ChannelIDEqualFold(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldChannelID), v))
		},
	)
}

// ChannelIDContainsFold applies the ContainsFold predicate on the "channelID" field.
func ChannelIDContainsFold(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldChannelID), v))
		},
	)
}

// DisplayMessageIDEQ applies the EQ predicate on the "displayMessageID" field.
func DisplayMessageIDEQ(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDNEQ applies the NEQ predicate on the "displayMessageID" field.
func DisplayMessageIDNEQ(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.NEQ(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDIn applies the In predicate on the "displayMessageID" field.
func DisplayMessageIDIn(vs ...string) predicate.GuildBank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.In(s.C(FieldDisplayMessageID), v...))
		},
	)
}

// DisplayMessageIDNotIn applies the NotIn predicate on the "displayMessageID" field.
func DisplayMessageIDNotIn(vs ...string) predicate.GuildBank {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GuildBank(
		func(s *sql.Selector) {
			// if not arguments were provided, append the FALSE constants,
			// since we can't apply "IN ()". This will make this predicate falsy.
			if len(vs) == 0 {
				s.Where(sql.False())
				return
			}
			s.Where(sql.NotIn(s.C(FieldDisplayMessageID), v...))
		},
	)
}

// DisplayMessageIDGT applies the GT predicate on the "displayMessageID" field.
func DisplayMessageIDGT(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GT(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDGTE applies the GTE predicate on the "displayMessageID" field.
func DisplayMessageIDGTE(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.GTE(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDLT applies the LT predicate on the "displayMessageID" field.
func DisplayMessageIDLT(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LT(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDLTE applies the LTE predicate on the "displayMessageID" field.
func DisplayMessageIDLTE(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.LTE(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDContains applies the Contains predicate on the "displayMessageID" field.
func DisplayMessageIDContains(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.Contains(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDHasPrefix applies the HasPrefix predicate on the "displayMessageID" field.
func DisplayMessageIDHasPrefix(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.HasPrefix(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDHasSuffix applies the HasSuffix predicate on the "displayMessageID" field.
func DisplayMessageIDHasSuffix(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.HasSuffix(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDEqualFold applies the EqualFold predicate on the "displayMessageID" field.
func DisplayMessageIDEqualFold(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.EqualFold(s.C(FieldDisplayMessageID), v))
		},
	)
}

// DisplayMessageIDContainsFold applies the ContainsFold predicate on the "displayMessageID" field.
func DisplayMessageIDContainsFold(v string) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			s.Where(sql.ContainsFold(s.C(FieldDisplayMessageID), v))
		},
	)
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			t1 := s.Table()
			builder := sql.Dialect(s.Dialect())
			s.Where(
				sql.In(
					t1.C(FieldID),
					builder.Select(ItemsColumn).
						From(builder.Table(ItemsTable)).
						Where(sql.NotNull(ItemsColumn)),
				),
			)
		},
	)
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.BankItem) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			builder := sql.Dialect(s.Dialect())
			t1 := s.Table()
			t2 := builder.Select(ItemsColumn).From(builder.Table(ItemsTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(FieldID), t2))
		},
	)
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			t1 := s.Table()
			s.Where(sql.NotNull(t1.C(GuildColumn)))
		},
	)
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			builder := sql.Dialect(s.Dialect())
			t1 := s.Table()
			t2 := builder.Select(FieldID).From(builder.Table(GuildInverseTable))
			for _, p := range preds {
				p(t2)
			}
			s.Where(sql.In(t1.C(GuildColumn), t2))
		},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.GuildBank) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			for _, p := range predicates {
				p(s)
			}
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.GuildBank) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			for i, p := range predicates {
				if i > 0 {
					s.Or()
				}
				p(s)
			}
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GuildBank) predicate.GuildBank {
	return predicate.GuildBank(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
